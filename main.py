import discord
from discord.ext import commands
import os
import sqlite3
import random
from flask import Flask
from threading import Thread

# --- C·∫§U H√åNH BOT V√Ä DATABASE ---

# L·∫•y Token t·ª´ Bi·∫øn M√¥i tr∆∞·ªùng (Environment Variables) c·ªßa Railway/GitHub
# ƒê·∫£m b·∫£o b·∫°n ƒë√£ l∆∞u Token Bot v·ªõi t√™n bi·∫øn l√† 'DISCORD_TOKEN'
TOKEN = os.getenv('DISCORD_TOKEN') 

# ID k√™nh b·∫°n mu·ªën bot g·ª≠i tin nh·∫Øn ch√†o m·ª´ng
# <<< B·∫ÆT BU·ªòC THAY B·∫∞NG ID K√äNH TH·ª∞C T·∫æ C·ª¶A SERVER B·∫†N >>>
WELCOME_CHANNEL_ID = 123456789012345678 

# C·∫•u h√¨nh Discord Bot
intents = discord.Intents.default()
# C·∫ßn b·∫≠t c√°c Intents n√†y tr√™n Discord Developer Portal
intents.members = True 
intents.message_content = True 

bot = commands.Bot(command_prefix='!', intents=intents)

# --- DATABASE SETUP (S·ª≠ d·ª•ng SQLite) ---

# T√™n file database ƒë·ªÉ l∆∞u tr·ªØ ti·ªÅn
DB_NAME = 'economy.db'
conn = sqlite3.connect(DB_NAME)
c = conn.cursor()

# T·∫°o b·∫£ng ng∆∞·ªùi d√πng n·∫øu ch∆∞a t·ªìn t·∫°i
c.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        balance INTEGER DEFAULT 0
    )
''')
conn.commit()

# H√†m l·∫•y s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng
def get_balance(user_id):
    c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    if result:
        return result[0]
    # N·∫øu ch∆∞a c√≥ trong DB, th√™m ng∆∞·ªùi d√πng m·ªõi v·ªõi s·ªë d∆∞ 0
    c.execute('INSERT INTO users (user_id, balance) VALUES (?, ?)', (user_id, 0))
    conn.commit()
    return 0

# H√†m th√™m/tr·ª´ ti·ªÅn c·ªßa ng∆∞·ªùi d√πng
def update_balance(user_id, amount):
    balance = get_balance(user_id)
    new_balance = balance + amount
    c.execute('UPDATE users SET balance = ? WHERE user_id = ?', (new_balance, user_id))
    conn.commit()
    return new_balance

# --- S·ª∞ KI·ªÜN BOT ---

@bot.event
async def on_ready():
    print(f'‚úÖ Bot ƒë√£ online v√† ƒëƒÉng nh·∫≠p v·ªõi t√™n: {bot.user}')
    # In ra URL ƒë·ªÉ bi·∫øt ƒë·ªãa ch·ªâ Flask ƒëang ch·∫°y (d√πng cho UptimeRobot n·∫øu c·∫ßn)
    print(f"Flask Webserver Running on port: {os.getenv('PORT')}") 

@bot.event
async def on_member_join(member):
    """T·ª± ƒë·ªông ch√†o 'member' khi v√†o room, v√†o server"""
    channel = bot.get_channel(WELCOME_CHANNEL_ID)
    if channel:
        # T·∫∑ng 100 xu kh·ªüi nghi·ªáp
        update_balance(member.id, 100) 
        await channel.send(f"üéâ Ch√†o m·ª´ng **{member.mention}** ƒë√£ gia nh·∫≠p m√°y ch·ªß! Ch√∫c b·∫°n c√≥ nh·ªØng ph√∫t gi√¢y vui v·∫ª. B·∫°n ƒë∆∞·ª£c t·∫∑ng **100** xu kh·ªüi nghi·ªáp!")
    else:
        print(f"L·ªñI: Kh√¥ng t√¨m th·∫•y k√™nh c√≥ ID: {WELCOME_CHANNEL_ID}")


# --- L·ªÜNH BOT: L·ªánh BS (ƒê·ªçc tin nh·∫Øn trong chat) ---

@bot.command(name="bs")
async def broadcast_message(ctx, *, message: str):
    """ƒê·ªçc tin nh·∫Øn trong chat = L·ªÜNH \"bs+ tin nh·∫Øn\" (D√πng !bs <tin nh·∫Øn>)"""
    # X√≥a tin nh·∫Øn l·ªánh n·∫øu bot c√≥ quy·ªÅn
    try:
        await ctx.message.delete()
    except discord.Forbidden:
        pass 
        
    await ctx.send(f"üì£ **Th√¥ng b√°o t·ª´ {ctx.author.display_name}:** {message}")

# --- L·ªÜNH BOT: H·ªÜ TH·ªêNG TI·ªÄN T·ªÜ ---

@bot.command(name="balance", aliases=["bal", "tien"])
async def balance_command(ctx, member: discord.Member = None):
    """Ki·ªÉm tra s·ªë ti·ªÅn."""
    member = member or ctx.author
    balance = get_balance(member.id)
    await ctx.send(f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i c·ªßa **{member.display_name}** l√†: **{balance}** xu.")

@bot.command(name="give")
@commands.has_permissions(administrator=True) # L·ªánh d√†nh cho Admin
async def give_money(ctx, member: discord.Member, amount: int):
    """L·ªánh !give @user <s·ªë ti·ªÅn> (Ch·ªâ Admin)"""
    if amount <= 0:
        await ctx.send("S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.")
        return
    
    update_balance(member.id, amount)
    await ctx.send(f"‚úÖ ƒê√£ chuy·ªÉn **{amount}** xu cho **{member.display_name}**. S·ªë d∆∞ m·ªõi: **{get_balance(member.id)}** xu.")

# --- L·ªÜNH BOT: T·∫†O TR√í CH∆†I (Gi·ªëng owo) ---

@bot.command(name="hunt", aliases=["h"])
@commands.cooldown(1, 60, commands.BucketType.user) # Cooldown 60 gi√¢y
async def hunt_command(ctx):
    """Tr√≤ ch∆°i t√¨m ki·∫øm v√† ki·∫øm ti·ªÅn (Cooldown 60s)."""
    user_id = ctx.author.id
    
    # C√°c t√¨nh hu·ªëng khi sƒÉn (T·ª∑ l·ªá %, S·ªë ti·ªÅn)
    outcomes = {
        "th√†nh c√¥ng": (50, 200),  
        "b√¨nh th∆∞·ªùng": (30, 100), 
        "th·∫•t b·∫°i": (20, 0)       
    }
    
    choice = random.choices(
        list(outcomes.keys()), 
        weights=[outcomes[k][0] for k in outcomes]
    )[0]
    
    if choice == "th√†nh c√¥ng":
        amount = outcomes[choice][1]
        update_balance(user_id, amount)
        await ctx.send(f"üåü **{ctx.author.display_name}** ƒëi sƒÉn th√†nh c√¥ng! B·∫°n b·∫Øt ƒë∆∞·ª£c m·ªôt con th√∫ hi·∫øm v√† ki·∫øm ƒë∆∞·ª£c **{amount}** xu.")
    elif choice == "b√¨nh th∆∞·ªùng":
        amount = outcomes[choice][1]
        update_balance(user_id, amount)
        await ctx.send(f"üå≤ **{ctx.author.display_name}** ƒëi sƒÉn v√† t√¨m ƒë∆∞·ª£c **{amount}** xu.")
    else:
        await ctx.send(f"üíî **{ctx.author.display_name}** ƒëi sƒÉn nh∆∞ng kh√¥ng t√¨m th·∫•y g√¨ c·∫£. Th·ª≠ l·∫°i sau nh√©!")

    # Hi·ªÉn th·ªã s·ªë d∆∞ m·ªõi
    await balance_command(ctx)

@hunt_command.error
async def hunt_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚è∞ **{ctx.author.display_name}** ∆°i, b·∫°n ph·∫£i ch·ªù **{int(error.retry_after)}** gi√¢y n·ªØa m·ªõi c√≥ th·ªÉ ƒëi sƒÉn ti·∫øp.")

# --- THI·∫æT L·∫¨P KEEP-ALIVE B·∫∞NG FLASK (R·∫•t quan tr·ªçng cho Hosting) ---

# Flask s·∫Ω t·∫°o ra m·ªôt m√°y ch·ªß web nh·ªè m√† Railway (ho·∫∑c UptimeRobot) s·∫Ω ping
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot ƒëang ch·∫°y ·ªïn ƒë·ªãnh 24/7 tr√™n Railway."

def run():
  # Railway s·∫Ω t·ª± ƒë·ªông cung c·∫•p m·ªôt c·ªïng (port)
  port = int(os.environ.get("PORT", 5000))
  app.run(host='0.0.0.0', port=port)

def keep_alive():
    t = Thread(target=run)
    t.start()

# --- KH·ªûI ƒê·ªòNG BOT V√Ä KEEP-ALIVE ---

if __name__ == '__main__':
    keep_alive() # Kh·ªüi ƒë·ªông m√°y ch·ªß web Flask
    bot.run(TOKEN) # Kh·ªüi ƒë·ªông bot Discord

